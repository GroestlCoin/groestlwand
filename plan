plan



still to do:

put username into frontend modals
check if username exists and get providers for username
// Check that tips work
// Withdraw in pages
// Get reddit scraping working right
// Get bookmarklet versioning working rights
//fix dropdown and modal issues
// figure out which way to go with account linking


## Sign in checking plan
* Try to retreive user info from server
* If not signed in pop login modal - need to make it choose the right provider
* If user account and signed in account do not match, pop modal with list of accounts and merge link



## signed into both
* straight up auth

## signed into site, not signed into extension
* ask if they want to sign up for groestlwand or link this social media account to an existing groestlwand account
* if sign up- auth normally
* if link- type in username, get list of providers linked to username, offer them for mergeuser.

## extension and site users do not match
* ask if they want to sign up for groestlwand or link this social media account to an existing groestlwand account
* if sign up- auth normally
* if link- type in username, get list of providers linked to username, offer them for mergeuser.


- Not signed into site:
  Pop modal informing a motherfucker, exit

- Not signed into Groestlwand
  Sign in button with page provider
  OR
  Link to existing account button


- Not signed into Groestlwand
  Sign in button with page provider
  OR
  Link to existing account button





- Signed into Groestlwand with wrong acct
  Link to existing account button


I have a Groestlwand account linked to Twitter and Reddit. I am not logged into it.
I log into Facebook and open the extension. I get a modal asking me if I want to make a new Groestlwand
account with my Facebook account or link it to another account.

page.provider: Facebook
page.uniqid: jehan.tremback
user.provider: null
user.uniqid: null


I have a Groestlwand account linked to Twitter and Facebook. I am not logged into it.
I log into Facebook and open the extension. I get a modal asking me if I want to log into Groestlwand
with my Facebook account.

page.provider: Facebook
page.uniqid: jehan.tremback
user.provider: null
user.uniqid: null


I do not have a Groestlwand account. I am not logged into it (obviously).
I log into Facebook and open the extension. I get a modal asking me if I want to make a new Groestlwand
account with my Facebook account.

page.provider: Facebook
page.uniqid: jehan.tremback
user.provider: null
user.uniqid: null


I have a Groestlwand account linked to Twitter and Reddit. It has a username. I am logged into it.
I log into Facebook and open the extension. I get a modal asking me if I want to link my Facebook
account to Groestlwand.

page.provider: Facebook
page.uniqid: jehan.tremback
user.provider: Facebook
user.uniqid: jehan.tremback


if (page is logged in)
  if (groestlwand is logged in)
    if (page creds match user creds)
      go!
    else
      if (user a exists with page creds)
        message: do you want to link logged in user with user a
      else
        message: do you want to link logged in user with provider
  else
    if (user a exists with page creds)
      message: do you want to log in with user a
    else
      message: do you want to make account with provider

else
  message: please log in to provider





DROP SCHEMA public CASCADE;,
CREATE SCHEMA public;,
GRANT ALL ON SCHEMA public TO jehan;,
GRANT ALL ON SCHEMA public TO public;,
COMMENT ON SCHEMA public IS 'standard public schema';


-- populate with stuff
-- 1
INSERT INTO users (balance)
VALUES (2340);

-- 2
INSERT INTO users (balance)
VALUES (123);

-- 3
INSERT INTO users (balance)
VALUES (567);

-- 1
INSERT INTO accounts (user_id, uniqid, provider, display_name)
VALUES (1, 'arya.stark', 'farcebook', 'Arya Stark');

-- 2
INSERT INTO accounts (user_id, uniqid, provider, display_name)
VALUES (1, '@aryastark', 'twatter', 'Arya Stark');

-- 3
INSERT INTO accounts (user_id, uniqid, provider, display_name)
VALUES (1, 'aryast$rk', 'yotub', 'Arya');

-- 4
INSERT INTO accounts (user_id, uniqid, provider, display_name)
VALUES (2, 'the.hound', 'farcebook', 'The Hound');

-- 5
INSERT INTO accounts (user_id, uniqid, provider, display_name)
VALUES (2, '@thehound', 'twatter', 'The Hound');

-- 6
INSERT INTO accounts (user_id, uniqid, provider, display_name)
VALUES (NULL, '@tywin', 'twatter', 'Tywin Lannister');

-- 1
INSERT INTO tips (tipper_id, tippee_id, amount)
VALUES (3, 4, 100);

-- 2
INSERT INTO tips (tipper_id, tippee_id, amount)
VALUES (2, 5, 10);

-- 3
INSERT INTO tips (tipper_id, tippee_id, amount)
VALUES (5, 2, 35);

-- 4
INSERT INTO tips (tipper_id, tippee_id, amount)
VALUES (1, 6, 30);



INSERT INTO deposits (txid, address, amount, blockhash)
VALUES ($1, $2, $3, $4)


INSERT INTO withdrawals (txid, amount, user_id)
VALUES ($1, $2, $3)

UPDATE users
SET balance = balance - $2
WHERE user_id = $1


SELECT user_id FROM accounts
WHERE uniqid = $1 AND provider = $2

UPDATE accounts
SET user_id = $1
WHERE user_id = $2 -- Must be authed in here, either from req.user or account supplied from passport

UPDATE users
SET balance = balance + (
  SELECT balance FROM users
  WHERE user_id = $2
)
WHERE user_id = $1

DELETE FROM users
WHERE user_id = $1

UPDATE users
SET balance = balance + $1
WHERE user_id = (
  SELECT user_id FROM addresses
  WHERE address = $2
)



BEGIN;
UPDATE accounts
SET name = $3 WHERE uniqid = $1 AND provider = $2;

INSERT INTO accounts (uniqid, provider, name)
SELECT $1, $2, $3
WHERE NOT EXISTS (
  SELECT 1 FROM accounts
  WHERE uniqid = $1 AND provider = $2
);

SELECT * FROM accounts
WHERE uniqid = $1 AND provider = $2;
COMMIT;



BEGIN;
UPDATE accounts
SET display_name = 'blintzen' WHERE uniqid = 'the.hound' AND provider = 'farcebook';

INSERT INTO accounts (uniqid, provider, display_name)
SELECT 'the.hound', 'farcebook', 'blintzen'
WHERE NOT EXISTS (
  SELECT 1 FROM accounts
  WHERE uniqid = 'the.hound' AND provider = 'farcebook'
);

SELECT * FROM accounts
WHERE uniqid = 'the.hound' AND provider = 'farcebook';
COMMIT;



-- --
-- WITH a AS (
--   UPDATE accounts
--   SET display_name = 'flintzen' WHERE uniqid = 'dingum' AND provider = 'ringum'
--   RETURNING *
-- ), b AS (
--   INSERT INTO users (balance)
--   SELECT 0
--   WHERE NOT EXISTS (
--     SELECT user_id FROM a
--   )
--   RETURNING user_id
-- ), c AS (
--   UPDATE accounts
--   SET user_id = (SELECT user_id FROM b) WHERE uniqid = 'dingum' AND provider = 'ringum'
--   RETURNING *
-- )

-- INSERT INTO accounts (uniqid, provider, display_name, user_id)
-- SELECT 'dingum', 'ringum', 'flintzen', user_id FROM b
-- WHERE NOT EXISTS (
--   SELECT 1 FROM accounts
--   WHERE uniqid = 'dingum' AND provider = 'ringum'
-- );

WITH u AS (
  INSERT INTO users (balance)
  VALUES (0)
  RETURNING user_id
)
UPDATE accounts
SET user_id = (SELECT user_id FROM u)
WHERE account_id = $1
RETURNING user_id



SELECT * FROM users
INNER JOIN accounts ON accounts.user_id = users.user_id
WHERE users.user_id=(
  SELECT user_id FROM accounts
  WHERE uniqid = 'dingum' AND provider = 'ringum'
);


SELECT * FROM users
INNER JOIN accounts ON accounts.user_id = users.user_id
WHERE users.user_id=$1


-- auth
BEGIN;
INSERT INTO accounts (uniqid, provider, name)
SELECT $1, $2, $3
WHERE NOT EXISTS (
  SELECT 1 FROM accounts
  WHERE uniqid = $1 AND provider = $2
);
SELECT * FROM accounts
WHERE uniqid = $1 AND provider = $2;

SELECT * FROM users u, accounts a
WHERE a.user_id = u.user_id

COMMIT;

-- amount, user, uniqid, provider, name
-- example of create tip
BEGIN;
UPDATE users SET balance = balance - $2 WHERE user_id = $1;

WITH te AS (
  SELECT accountInsertOrSelect($3, $4, $5) AS account_id
), tr AS (
  SELECT account_id FROM accounts WHERE user_id = $1 AND provider = $4 LIMIT 1 )
INSERT INTO tips (tipper_id, tippee_id, amount)
VALUES ((SELECT account_id FROM te), (SELECT account_id from tr), $2);
RETURNING tip_id
COMMIT;


-- working resolve!
-- BEGIN;
WITH tip AS (
  UPDATE tips t
  SET state = CASE WHEN t.tippee_id = a.account_id THEN 'claimed'::tip_state
                   WHEN t.tipper_id = a.account_id THEN 'canceled'::tip_state
                   END
  FROM accounts a WHERE user_id = $1 AND tip_id = $2 AND state = 'created'::tip_state
  AND (t.tippee_id = a.account_id OR t.tipper_id = a.account_id)
  RETURNING *
)
UPDATE users
SET balance = balance + (SELECT amount FROM tip)
WHERE user_id = $1
RETURNING balance
-- COMMIT;



drop function if exists accountInsertOrSelect (text, text, text);
-- uniqid, provider, name
CREATE FUNCTION accountInsertOrSelect (text, text, text)
RETURNS int
AS $$
DECLARE _id int;
BEGIN
LOOP
  SELECT account_id INTO _id FROM accounts
  WHERE uniqid = $1
  AND provider = $2;
  IF found THEN
    RETURN _id;
  END IF;
  BEGIN
    INSERT INTO accounts (uniqid, provider, display_name)
    VALUES ($1, $2, $3)
    RETURNING account_id INTO _id;
    RETURN _id;
  EXCEPTION WHEN unique_violation THEN
  END;
END LOOP;
END
$$ LANGUAGE plpgsql;


drop function if exists accountInsertOrUpdate (text, text, text);
-- uniqid, provider, name
CREATE FUNCTION accountInsertOrUpdate (text, text, text)
RETURNS RECORD
AS $$
DECLARE result RECORD;
BEGIN
LOOP
  UPDATE accounts
  SET display_name = $3
  WHERE uniqid = $1
  AND provider = $2
  RETURNING * INTO result;
  IF found THEN
    RETURN result;
  END IF;
  BEGIN
    INSERT INTO accounts (uniqid, provider, display_name)
    VALUES ($1, $2, $3)
    RETURNING * INTO result;
    RETURN result;
  EXCEPTION WHEN unique_violation THEN
  END;
END LOOP;
END
$$ LANGUAGE plpgsql;


User
  balance

Account
  uniqid
  provider
  name
  user_id

Tip
  amount
  tipper_id
  tippee_id
  state
  hash (maybe?)

User making scenarios:
  Fresh sign up

Account making scenarios:
  New tip
  Linking account


Create user:
  Create user with 0 balance
  Find or create account with provider and uniqid and name from auth. Replace name if account
  already exists.

Auth:
  insert or update and select account
  insert user and update account with user_id
  use account.user_id to select user and join all accounts

  Case 1- user is not logged in, account exists

  Case 2- user is not logged in, account does not exist

  Case 3- user is not logged in, account exists, is not associated with user




Merge Users:
  Get provider and uniqid from auth
  find account, user
  move all funds from user to signed in user
  change all accounts with user_id to signed in user id

Create tip:
  Look for account with scraped provider and uniqid. If none found make one.
  Use above for tippee_id.
  tipper_id of first account from current user that matches provider (can offer choice later)
  state created
  insert tip
  return uuid to use in url

Resolve tip:
  we have:
    current user_id
    tip info:
      tipper_id
      tippee_id

  get tipper_id and tippee_id accounts, check if they have user_id of current user

  check if user id matches either tippee or tipper account- error if not
  set state based on this- resolve or claim
  move amount from escrow to user




Merging users:

User already has account with other provider(s). They receive a tip on a new provider, and are not
signed in to that provider. They claim the tip using the new user resolve flow. A new account is created.

Option 1:

Do you already have a groestlwand account? Click here to merge accounts.
Need both users. NOTE: profile info is effectively same as user object.
Use passport authorize, then use profile info to look up additional account.
When you have the additional account, choose which direction to merge in.

Get balance of merge account. Move all funds from merge account to the other account.
Add auth info from merge account into other account. Delete merge account.


Want to move *to* otheraccount:
When one has accepted a tip on a new provider, creating superflous account, which one is logged into
at the time.

Want to move *from* otheraccount:
When one would like to start tipping on a new provider and is logged into the account one would like
to tip with.


Is there anything bad that happens if one merges a whole array of providers and not just one?

- Not that I can think of right now


Option 2:




Iframe comms flow:

option 1

* Loader opens iframe
* Saves reference to iframe
* Sends version to iframe
* iframe checks version, maybe pops update modal

option 2

* Loader opens Iframe
* Iframe sends hello message
* Loader saves reference to iframe
* Sends version to iframe
* iframe checks version, maybe pops update modal

TODO:

* API tests
* Automatically update balances from deposits
* Deal with remaining login jank
*


Putting whole thing in iframe-

  * Load zepto twice- fuck it (maybe use native dom stuff??)
  * Channel.js framework if needed? probably not right now
  * Just seperate the shit out, put dom scraping stuff outside.

  * Seperate lib file in iframe- like normal website
  * Still concatting everything outside

  Outside script functionality:
    * Load and resize iframe
    * Page scraping functionality
    * Talk to stuff inside
    * Does it need to even do any ajax???
    * Be as small as possible

  Iframe script functionality:
    * Send resize messages
    * Pop modals
    * Display forms
    * Send ajax or possibly just form submits?
    * MVP for toolbar, balance. later, tips lists

  Preprocessing needed:

    Outside script:
      * Concat lib stuff
      * Minify
      * Incremental not needed? (unless there is html or smthing?)

    Iframe script:
      * Same stuff from before- incremental etc.
      * Put css straight in page, process seperately

How to show tip confirmation

1. Send close postmessage on submit

  Pros
    * Simplest

  Cons
    * Will need to reload tips in extension, likely race condition


2. Send post with js in iframe, send closer postmessage with data to extension

  Pros
    * Most elegant

  Cons
    * Need to write xmlhhtp requests or load zepto or other lib redundantly


3. Redirect to iframe closer page, load tip confirmation in extension upon close

  Pros
    * Simple
    * Eliminates race condition by controlling timing

  Cons
    * Need to make another request


4. Submit form normally, redirect to closer page with templated-in data.

  Pros
    * Simple to build

  Cons
    * Weird


5. Submit form normally, reload page with flash message with tip data for extension.

  Pros
    * Existing solutions
    * Flash messages will be good to have for other stuff?

  Cons
    * Old school?
    * Reload flicker
    * Need to learn new module


tip on the frontend

get username for url
or get username pasted

make tip call

display error or
display tip link

update balance and tip lists



get api/user
  current logged in user data

get api/user/tips
  get current user's tips

post api/tip/create_tip
  create tip

post api/tip/resolve_tip
  resolve tip to current user



get tip/:_id
  view tip page

get account
  view account of signed in user

get extension/*
  pages formatted for an iframe in the extension




alternate db:

  Account:
    user_id
    wallet_id
    provider
    identifier

  User:
    email

  Tip:
    from_user
    to_user
    amount
    hash


POST groestlwand.com/api/tip?id=jureto&amount=30&provider=face

generate tip
  receive identifier of tipee and amount
  check for user with id_info
    if no user: make new user with identifier
      gen wallet id
      new entry in db
    call jae: move to wallet
      if insufficient balance: send back to extension
      if success:
        new tip record


extension auth:



todo:
  X get gulp making js with templates
  X login
  X bookmarklet dom stuff
  X bookmarklet loading
  X bookmarklet comms
  bookmarklet interface
  test db api
  tip page
  talk to jae api



Bookmarklet interface:
  popup "click on someone's profile link to tip them with the groestlwand"
  link for explanatory image
  close button
  on click on profile link:
    pop amount dialog
    enter amount
    click tip button:
      "you have tipped x y groestlcoins. if they do not claim their tip, you can cancel it in 1 week. paste this message into a comment to let them know about it"



Database Schema:

user:
  auth stuff etc
  jae creds
tips:
  amount
  from_user
  to_user


API calls:

new user
  blah blah auth
sign in
  blah blah auth
sign out
  blah blah auth


generate tip
  receive id_info of tipee and amount
  check for user with id_info
    if no user: make new user with id_info
      gen wallet id
      new entry in db
    call jae: move to wallet
      if insufficient balance: send back to extension
      if success:
        add tip_page record
        send url back to extension

tip page
  parse url for tip id
  get tip record from db
  gen tip page with tip amount, user etc.

view balance
  call jae: get wallet balance



possible states upon viewing tip page
  not signed in
    "x has tipped u y groestls, click here to sign in"
  signed in
    "x has tipped u y groestls"
